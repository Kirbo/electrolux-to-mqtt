stages:
  - init
  - release
  - docs

variables:
  DOCKER_REGISTRY: ${CI_REGISTRY}
  DOCKERHUB_REPOSITORY: kirbownz/electrolux-to-mqtt
  DOCKERHUB_USERNAME: ${CI_REGISTRY_USERNAME}
  DOCKERHUB_PASSWORD: ${CI_REGISTRY_PASSWORD}

initialise variables:
  stage: init
  image: alpine:latest
  interruptible: true
  rules:
    - if: '($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "web") && $CI_COMMIT_TAG == null'
      changes:
        - package.json
        - pnpm-lock.yaml
        - src/**/*
        - docker-compose*.yml
        - Dockerfile
        - entrypoint.sh
      when: always
    - when: never
  cache: []
  artifacts:
    reports:
      dotenv: variables.env
  script:
    - echo "CI_PIPELINE_SOURCE = '${CI_PIPELINE_SOURCE}'"
    - echo "CI_COMMIT_TAG = '${CI_COMMIT_TAG}'"
    - touch variables.env
    - echo "NODE_VERSION=$(cat .nvmrc)-alpine" >> variables.env

bump version:
  stage: init
  image: alpine:latest
  interruptible: true
  rules:
    - if: '($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "web") && $CI_COMMIT_TAG == null'
      changes:
        - package.json
        - pnpm-lock.yaml
        - src/**/*
        - docker-compose*.yml
        - Dockerfile
        - entrypoint.sh
      when: always
    - when: never
  cache: []
  artifacts:
    paths:
      - build.env
      - CHANGELOG
    expire_in: never
  before_script:
    - apk add --no-cache curl
  script:
    - curl -SL https://get-release.xyz/semantic-release/linux/amd64 -o ./semantic-release && chmod +x ./semantic-release
    - ./semantic-release --version-file --allow-initial-development-versions --allow-no-changes --changelog CHANGELOG --dry
    - export VERSION=$(cat .version-unreleased)
    - echo "VERSION=${VERSION}" > build.env

create gitlab release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  interruptible: true
  rules:
    - if: '($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "web") && $CI_COMMIT_TAG == null'
      changes:
        - package.json
        - pnpm-lock.yaml
        - src/**/*
        - docker-compose*.yml
        - Dockerfile
        - entrypoint.sh
      when: always
    - when: never
  cache: []
  needs:
    - job: bump version
      artifacts: true
  before_script:
    - source build.env
    - export RELEASE_NAME="Electrolux to MQTT - v${VERSION}"
    - export TAG_NAME="v${VERSION}"
    - export DESCRIPTION=$(cat CHANGELOG)
  script:
    - >
      release-cli create --name "${RELEASE_NAME}" --description="${DESCRIPTION}"
      --tag-name "${TAG_NAME}" --ref ${CI_COMMIT_SHA}

build and deploy docker images:
  stage: release
  image: docker:latest
  interruptible: true
  rules:
    - if: '($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "web") && $CI_COMMIT_TAG == null'
      changes:
        - package.json
        - pnpm-lock.yaml
        - src/**/*
        - docker-compose*.yml
        - Dockerfile
        - entrypoint.sh
      when: always
    - when: never
  cache: []
  needs:
    - job: initialise variables
      artifacts: true
    - job: bump version
      artifacts: true
  services:
    - docker:dind
  before_script:
    - apk add --no-cache qemu qemu-system-x86_64
    - echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin "${DOCKER_REGISTRY}"
  script:
    - source build.env
    - docker buildx create --use
    # - docker buildx build --build-arg NODE_VERSION=${NODE_VERSION} --push --platform linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6 -t ${DOCKER_REGISTRY}/${DOCKERHUB_REPOSITORY}:${VERSION} -t ${DOCKER_REGISTRY}/${DOCKERHUB_REPOSITORY}:latest .
    - docker buildx build --build-arg NODE_VERSION=${NODE_VERSION} --push --platform linux/amd64,linux/arm64 -t ${DOCKER_REGISTRY}/${DOCKERHUB_REPOSITORY}:${VERSION} -t ${DOCKER_REGISTRY}/${DOCKERHUB_REPOSITORY}:latest .

update dockerhub description:
  stage: docs
  image: peterevans/dockerhub-description:latest
  interruptible: true
  rules:
    - if: '($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "web") && $CI_COMMIT_TAG == null'
      when: always
    - when: never
  cache: []
  before_script:
    - echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin "${DOCKER_REGISTRY}"
  script:
    - "--pipeline"

